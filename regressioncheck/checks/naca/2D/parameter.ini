!=================================================================================================================================
! Copyright (c) 2010-2024  Prof. Claus-Dieter Munz
! This file is part of FLEXI, a high-order accurate framework for numerically solving PDEs with discontinuous Galerkin methods.
! For more information see https://www.flexi-project.org and https://nrg.iag.uni-stuttgart.de/
!
! FLEXI is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License
! as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
!
! FLEXI is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty
! of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License v3.0 for more details.
!
! You should have received a copy of the GNU General Public License along with FLEXI. If not, see <http://www.gnu.org/licenses/>.
!=================================================================================================================================
!
!   This a parameter file for Flexi (https://flexi-project.org)
!
!   Usage: mpirun -np XX ./flexi thisparameterfile.ini or
!          ./flexi thisparameterfile.ini
!
!   Structure: Keyword = Value
!              Not case sensitive, order of keywords not important
!
!   ./flexi --help for a list of available settings
!
! =============================================================================== !
! OUTPUT
! =============================================================================== !
ProjectName       = NACA0012_Re5000_AoA8_2D       ! Name of the current simulation (mandatory).
Logging           =              F             ! Write log files containing debug output.
ErrorFiles        =              T             ! Write error files containing error output.
OutputFormat      =              0             ! File format for visualization. <=0: no
doPrintStatusLine =              F             ! Print: percentage of time, ...
ColoredOutput     =              T             ! Colorize stdout
Output2D          =              F

!=========================================================================================
! Interpolation
!=========================================================================================
N                     =              3 ! Polynomial degree
NVisu                 =             10 ! Polynomial degree at which solution is sampled for
                                       ! visualization.
NOut                  =             -1 ! Polynomial degree at which solution is written.
                                       ! -1: NOut=N, >0: NOut
!=========================================================================================
! Mesh
!=========================================================================================
MeshFile              = NACA0012_652_Ng2_mesh.h5  ! (relative) path to meshfile (mandatory).
useCurveds            =              T ! Controls usage of high-order information in mesh.
                                       ! Turn off to discard high-order data and treat
                                       ! curved meshes as linear meshes.
meshScale             =          1.000 ! Scale the mesh by this factor (shrink/enlarge).
meshdeform            =              F ! Apply simple sine-shaped deformation on cartesion
                                       ! mesh (for testing).
crossProductMetrics   =              F ! Compute mesh metrics using cross product form.
                                       ! Caution: in this case free-stream preservation is
                                       ! only guaranteed for N=3*NGeo.
!=========================================================================================
! Equation
!=========================================================================================
IniExactFunc          =            1   ! Exact function to be used for computing initial
                                       ! solution.
IniRefState           =            1   ! Refstate required for initialization.
kappa                 =          1.400 ! Heat capacity ratio / isentropic exponent
R                     =  2.857142857   ! Specific gas constant
Pr                    =          0.720 ! Prandtl number
mu0                   =          0.0002 ! Dynamic Viscosity
RefState              = (/1.,0.990268069,0.139173101,0.,4.4642857/)  ! State(s) in primitive variables (density, velx,
                                                                     ! vely, velz, pressure).
!=========================================================================================
! Sponge
!=========================================================================================
SpongeLayer           =              T ! Turn on to employ sponge regions for reducing
                                       ! reflections at boundaries.

SpongeDistance        =            3.0 ! Length of sponge ramp. The sponge will have
                                       ! maximum strength at the end of the ramp and after
                                       ! that point.

damping               =          100.0 ! Damping factor of sponge (0..1).

SpongeShape           =              1 ! Set shape of sponge: 1: cartesian /
                                       ! vector-aligned, 2: cylindrical

SpongexStart          =  (/2.0,0.,0./) ! Coordinates of start postion of sponge ramp
                                       ! (shape=1) or center (shape=2).

SpongeViz             =              T ! Turn on to write a visualization file of the
                                       ! sponge region and strength.

SpongeDir             = (/1,0,0/)      ! Direction vector of the spong ramp (SpongeShape=1)

SpongeBaseFlow        =              4 ! Type of baseflow to be used for sponge. 1: fixed
                                       ! state, 2: exact function, 3: read baseflow file,
                                       ! 4: temporally varying, solution adaptive Pruett
                                       ! baseflow

tempFilterWidthSponge =             2  ! Temporal filter witdh used to advance Pruett
                                       ! baseflow in time.)

BaseFlowRefState        =           1 ! Specify which refstate should be used in no baseflowfile is given.

!=========================================================================================
! Riemann
!=========================================================================================
Riemann               =             33 ! Riemann solver to be used. 1: Lax-Friedrichs, 2:
                                       ! HLLC, 3: Roe, 33: Roe with entropy fix, 4: HLL, 5:
                                       ! HLLE, 6: HLLEM

RiemannBC             =             -1 ! Riemann solver used for boundary conditions. -1:
                                       ! same as inside the domain, for other options see
                                       ! Riemann.
!=========================================================================================
! TimeDisc
!=========================================================================================
TimeDiscMethod        = CarpenterRK4-5 ! Specifies the type of time-discretization to be
TEnd                  = 10.            ! End time of the simulation (mandatory).
CFLScale              = 0.9            ! Scaling factor for the theoretical CFL number,
                                       ! typical range 0.1..1.0 (mandatory)
DFLScale              = 0.9            ! Scaling factor for the theoretical DFL number,
                                       ! typical range 0.1..1.0 (mandatory)
maxIter               =             -1 ! Stop simulation when specified number of timesteps
                                       ! has been performed.
NCalcTimeStepMax      =              1 ! Compute dt at least after every Nth timestep.

!=========================================================================================
! Analyze
!=========================================================================================
CalcErrorNorms        =              T ! Set true to compute L2 and LInf error norms at
                                       ! analyze step.
AnalyzeToFile         =              F ! Set true to output result of error norms to a file
                                       ! (CalcErrorNorms=T)
Analyze_dt            =          10.0  ! Specifies time intervall at which analysis
                                       ! routines are called.
nWriteData            =             1 ! Intervall as multiple of Analyze_dt at which HDF5
                                       ! files (e.g. State,TimeAvg,Fluc) are written.
!=========================================================================================
! AnalyzeEquation
!=========================================================================================
CalcBodyForces        =              T ! Set true to compute body forces at walls
CalcWallVelocity      =              T ! Set true to compute velocities at wall boundaries
CalcTimeAverage       =              F ! Set true to compute time averages
WriteBodyForces       =              T ! Set true to write bodyforces to file
WriteWallVelocity     =              T ! Set true to write wall velolcities file
