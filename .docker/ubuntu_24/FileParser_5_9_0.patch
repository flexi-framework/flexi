--- VTKExtensions/Core/vtkFileSequenceParser.cxx
+++ VTKExtensions/Core/vtkFileSequenceParser.cxx
@@ -30,6 +30,9 @@ vtkFileSequenceParser::vtkFileSequenceParser()
   // sequence ending with extension.
   reg_ex2(new vtksys::RegularExpression("^(.*)(\\.|_|-)([0-9.]+)\\.(.*)$"))
   ,
+  // sequence ending with extension (dual 000.001).
+  reg_ex22( new vtksys::RegularExpression("^(.*)(\\.|_|-)([0-9.]+)\\.([0-9.]+)\\.(.*)$"))
+  ,
   // sequence ending with extension, but with no ". or _" before
   // the series number.
   reg_ex3(new vtksys::RegularExpression("^(.*)([a-zA-Z])([0-9.]+)\\.(.*)$"))
@@ -56,6 +59,7 @@ vtkFileSequenceParser::~vtkFileSequenceParser()
 {
   delete this->reg_ex;
   delete this->reg_ex2;
+  delete this->reg_ex22;
   delete this->reg_ex3;
   delete this->reg_ex4;
   delete this->reg_ex5;
@@ -82,6 +86,12 @@ bool vtkFileSequenceParser::ParseFileSequence(const char* file)
     this->SequenceIndexString = this->reg_ex2->match(3);
     match = true;
   }
+  else if (this->reg_ex22->find(file))
+  {
+    this->SetSequenceName(std::string(this->reg_ex22->match(1) + this->reg_ex22->match(2) + ".." + this->reg_ex22->match(5)).c_str());
+    this->SequenceIndexString = this->reg_ex22->match(3) + this->reg_ex22->match(4);
+    match = true;
+  }
   else if (this->reg_ex3->find(file))
   {
     this->SetSequenceName(std::string(this->reg_ex3->match(1) + this->reg_ex3->match(2) + ".." +
--- VTKExtensions/Core/vtkFileSequenceParser.h
+++ VTKExtensions/Core/vtkFileSequenceParser.h
@@ -76,6 +76,7 @@ protected:
 
   vtksys::RegularExpression* reg_ex;
   vtksys::RegularExpression* reg_ex2;
+  vtksys::RegularExpression* reg_ex22;
   vtksys::RegularExpression* reg_ex3;
   vtksys::RegularExpression* reg_ex4;
   vtksys::RegularExpression* reg_ex5;
