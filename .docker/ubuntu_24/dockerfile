# Load the base image
# Ubuntu-based FLEXI environment including ParaView and HOPR/PyHope
# build docker image with github namespace: docker build -t ghcr.io/flexi-framework/ubuntu24.04_gcc:2025.06_devel .
# run docker image with X11-forwarding:     xhost +local:docker && docker run -it --rm -e DISPLAY=$DISPLAY -v /tmp/.X11-unix:/tmp/.X11-unix ghcr.io/flexi-framework/ubuntu24.04_gcc:2025.06_devel
# -----------------------------------------------------------------
FROM ubuntu:24.04

# Numerics research group
LABEL maintainer="numerics@iag.uni-stuttgart.de"

# Setup FLEXI environment as root
# -------------------------------

# Setup required packages
RUN apt-get update && \
    apt-get upgrade -y && \
    # FLEXI environment
    apt-get install -y --no-install-recommends \
    git git-lfs wget curl tar bzip2 build-essential cmake cmake-curses-gui gfortran \
    zlib1g-dev python3-dev python3-pip python3-venv libxft-dev mold vim nano \
    # ParaView setup
    mesa-common-dev libglu1-mesa-dev libgl1-mesa-dev libegl1-mesa-dev \
    qtbase5-dev qt5-qmake libqt5x11extras5-dev libqt5opengl5-dev libqt5help5 qtbase5-dev-tools qttools5-dev qtxmlpatterns5-dev-tools libqt5svg5-dev && \
    # reduce image size
    apt-get clean -y && apt-get autoremove -y --purge && rm -rf /var/lib/apt/lists/*

# set default locale for consistent build behavior and enabled non-ASCII keys (e.g. Umlaute): C = computer language, UTF-8 = utf8-encoding
ENV LC_ALL=C.UTF-8 \
    LANG=C.UTF-8
# disable CPU-specific optimizations to ensure portability of image:
# position-independent code (PIC) for shared libraries, compatibility with x86-64 processors, generic CPU scheduler
ENV CPU_PORTABLE_FLAGS="-fPIC -march=x86-64 -mtune=generic"
# Setup build evironment
ENV CC=gcc \
    CXX=g++ \
    FC=gfortran \
    F90=gfortran \
    CFLAGS=${CPU_PORTABLE_FLAGS} \
    CXXFLAGS=${CPU_PORTABLE_FLAGS} \
    CPPFLAGS=${CPU_PORTABLE_FLAGS} \
    FFLAGS=${CPU_PORTABLE_FLAGS} \
    FCFLAGS=${CPU_PORTABLE_FLAGS}

# Setup OpenBlas, ensure cross-platform portability by building library for multiple targets and detecting CPU at runtime (DYNAMIC_ARCH=ON)
RUN cd /tmp && \
    wget https://github.com/OpenMathLib/OpenBLAS/archive/refs/tags/v0.3.29.tar.gz && \
    tar -xvf v0.3.29.tar.gz && \
    cd OpenBLAS-0.3.29 && \
    mkdir build && cd build && \
    cmake -DCMAKE_INSTALL_PREFIX=/usr/local -DDYNAMIC_ARCH=ON .. && \
    make -j$(nproc) && cmake --install . && \
    cd /tmp && rm -rf OpenBLAS* && rm -rf v0.3.29.tar.gz

# Setup OpenMPI
RUN cd /tmp && \
    wget https://download.open-mpi.org/release/open-mpi/v5.0/openmpi-5.0.7.tar.bz2 && \
    tar -xvf openmpi-5.0.7.tar.bz2 && \
    cd openmpi-5.0.7 && \
    ./configure --prefix=/usr/local && \
    make -j$(nproc) && make install && \
    ldconfig && \
    cd /tmp && rm -rf openmpi*

# Setup HDF5
RUN cd /tmp && \
    wget https://github.com/HDFGroup/hdf5/releases/download/hdf5_1.14.4.3/hdf5-1.14.4-3.tar.gz && \
    tar -xvf hdf5-1.14.4-3.tar.gz && \
    cd hdf5-1.14.4-3 && \
    mkdir build && cd build && \
    cmake -DCMAKE_INSTALL_PREFIX=/usr/local \
        -DHDF5_BUILD_FORTRAN=ON \
        -DHDF5_ENABLE_PARALLEL=ON \
        .. && \
    make -j$(nproc) && cmake --install . && \
    cd /tmp && rm -rf hdf5*

# Setup FFTW
RUN cd /tmp && \
    wget https://fftw.org/fftw-3.3.10.tar.gz && \
    tar -xvf fftw-3.3.10.tar.gz && \
    cd fftw-3.3.10 && \
    ./configure --prefix=/usr/local && \
    make -j$(nproc) && make install && \
    cd /tmp && rm -rf fftw*

# Setup ParaView
# apt-repository provides v5.11.2 which suffers from XML-parsing bug (https://discourse.paraview.org/t/i-cannot-read-a-vtp-file-i-could-open-yesterday-can-someone-try-to-open-it/13938)
COPY FileParser_5_9_0.patch .
RUN cd /tmp && \
  wget https://www.paraview.org/files/v5.13/ParaView-v5.13.3.tar.gz && \
  tar -xvf ParaView-v5.13.3.tar.gz && \
  cd ParaView-v5.13.3 && \
  mv ../../FileParser_5_9_0.patch . && patch -p0 < FileParser_5_9_0.patch && \
  mkdir build && cd build/ && \
  cmake \
    -DCMAKE_BUILD_TYPE=Release \
    -DPARAVIEW_USE_MPI=ON \
    -DPARAVIEW_INSTALL_DEVELOPMENT_FILES=ON \
    -DPARAVIEW_USE_PYTHON=ON \
    -DVTK_MODULE_USE_EXTERNAL_VTK_hdf5=ON \
    -DHDF5_IS_PARALLEL=ON \
    -DHDF5_DIR=/usr/local/cmake \
    -DCMAKE_INSTALL_PREFIX=/usr/local ../ && \
  make -j $(nproc) && make install && \
  cd /tmp && rm -rf ParaView*

# Install FLEXI and HOPR/PyHope as user
# -------------------------------------

# create new (non-root) user "nrg" and switch to it
RUN useradd -ms /bin/bash nrg
USER nrg
WORKDIR /home/nrg
COPY vimrc /home/nrg/.vimrc

# create venv and enable it to allow for pip installations
RUN python3 -m venv venv
ENV PATH="/home/nrg/venv/bin:$PATH"

# Setup FLEXI
RUN cd ~ && \
  git clone https://github.com/flexi-framework/flexi.git && \
  cd flexi && \
  for PRESET in $(cmake --list-presets | sed -n 's/"\(.*\)".*/\1/p'); do \
    # build all presets without CPU-specifi optimizations to ensure portability
    cmake -B build_${PRESET} -DFLEXI_INSTRUCTION='-march=x86-64 -mtune=generic' --preset $PRESET && cmake --build build_${PRESET} -j ${nproc}; \
    # create symbolic link to prebuilt FLEXI binary for all associated tutorials: "name" of preset = name of build folder -> "displayName" of preset = path/to/tutorials
    for TUTORIAL in $(cmake --list-presets | sed -n "s/.*$PRESET.*- \(.*\)/\1/p"); do \
      ln -s -r build_${PRESET}/bin/flexi ${TUTORIAL}/flexi_${PRESET}; \
    done \
  done
  
# Setup HOPR
RUN cd ~ && \
  git clone https://github.com/hopr-framework/hopr.git && \
  cd hopr && mkdir build && cd build && \
  cmake -DLIBS_BUILD_HDF5=OFF -DHOPR_INSTRUCTION='-march=x86-64 -mtune=generic' ../ && \
  make -j $(nproc)
ENV PATH="/home/nrg/hopr/build/bin:$PATH"

# Setup PyHope
RUN cd ~ && \
  pip install --no-cache-dir https://gitlab.iag.uni-stuttgart.de/libs/python-gmsh/-/raw/master/gmsh-4.13.1.post1-py3-none-linux_x86_64.whl && \
  pip install pyhope
