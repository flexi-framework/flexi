# -----------------------------------------------------------------
# Ubuntu-based FLEXI environment including ParaView and HOPR / PyHOPE
# build docker image with github namespace: docker build -t ghcr.io/flexi-framework/ubuntu24.04_gcc:2025.08_devel .
# run docker image with X11-forwarding:     xhost +local:docker && docker run -it --rm -e DISPLAY=$DISPLAY -v /tmp/.X11-unix:/tmp/.X11-unix ghcr.io/flexi-framework/ubuntu24.04_gcc:2025.08_devel
# -----------------------------------------------------------------

# Load the base image
FROM ubuntu:24.04

# Numerics Research Group
LABEL maintainer="Numerics Reseach Group, University of Stuttgart <numerics@iag.uni-stuttgart.de>"

# Set name and user/group ID of non-root user to "jovyan" (default of Jupyter-notebooks)
ARG NB_USER=jovyan
ARG NB_UID=1001
ARG NB_GID=1001

# Configure system environment:
# - Use timezone (TZ) of Berlin as default
# - Suppress user-interaction during package installation (e.g. timezone configuration dialog of tzdata)
# - Set default locale for consistent build behavior and enabled non-ASCII keys (e.g. Umlaute): C = computer language, UTF-8 = utf8-encoding
# - Set bash as default shell (especially for the terminal in Jupyter notebooks)
ENV TZ=Europe/Berlin \
    DEBIAN_FRONTEND=noninteractive \
    LC_ALL=C.UTF-8 \
    LANG=C.UTF-8 \
    SHELL=/bin/bash


# -------------------------------
# Setup FLEXI environment as root
# -------------------------------

# Install basic packages and libraries as root
USER root

# Setup required packages
RUN apt-get update && \
    apt-get upgrade -y && \
    apt-get install -y --no-install-recommends \
    # Utility
    vim nano tzdata tree eog git git-lfs wget curl tar bzip2 build-essential \
    # FLEXI environment
    cmake cmake-curses-gui gfortran zlib1g-dev python3-dev python3-pip python3-venv python-is-python3 \
    # PyHOPE
    libxft-dev libxfixes3 \
    # ParaView setup
    mesa-common-dev libglu1-mesa-dev libgl1-mesa-dev libegl1-mesa-dev \
    qtbase5-dev qt5-qmake libqt5x11extras5-dev libqt5opengl5-dev libqt5help5 qtbase5-dev-tools qttools5-dev qtxmlpatterns5-dev-tools libqt5svg5-dev && \
    # reduce image size
    apt-get clean -y && apt-get autoremove -y --purge && rm -rf /var/lib/apt/lists/*

# Setup build environment, disabling CPU-specific optimizations to ensure portability of image:
# position-independent code (PIC) for shared libraries, compatibility with x86-64 processors, generic CPU scheduler
ENV CPU_PORTABLE_FLAGS="-fPIC -march=x86-64 -mtune=generic"
ENV CC=gcc \
    CXX=g++ \
    FC=gfortran \
    F90=gfortran \
    CFLAGS=${CPU_PORTABLE_FLAGS} \
    CXXFLAGS=${CPU_PORTABLE_FLAGS} \
    CPPFLAGS=${CPU_PORTABLE_FLAGS} \
    FFLAGS=${CPU_PORTABLE_FLAGS} \
    FCFLAGS=${CPU_PORTABLE_FLAGS}

# Setup OpenBLAS, ensure cross-platform portability by building library for multiple targets and detecting CPU at runtime (DYNAMIC_ARCH=ON)
RUN OPENBLAS_VERSION=0.3.30 && cd /tmp && \
    wget https://github.com/OpenMathLib/OpenBLAS/archive/refs/tags/v${OPENBLAS_VERSION}.tar.gz && \
    tar -xvf v${OPENBLAS_VERSION}.tar.gz && \
    cd OpenBLAS-${OPENBLAS_VERSION} && \
    mkdir build && cd build && \
    cmake -DCMAKE_INSTALL_PREFIX=/opt -DDYNAMIC_ARCH=ON .. && \
    make -j$(nproc) && cmake --install . && \
    cd /tmp && rm -rf OpenBLAS* && rm -rf v${OPENBLAS_VERSION}.tar.gz

# Setup OpenMPI
RUN OPENMPI_VERSION=5.0.8 && cd /tmp && \
    wget https://download.open-mpi.org/release/open-mpi/v5.0/openmpi-${OPENMPI_VERSION}.tar.bz2 && \
    tar -xvf openmpi-${OPENMPI_VERSION}.tar.bz2 && \
    cd openmpi-${OPENMPI_VERSION} && \
    ./configure --prefix=/opt && \
    make -j$(nproc) && make install && \
    ldconfig && \
    cd /tmp && rm -rf openmpi*

# Setup HDF5
RUN HDF5_VERSION=1.14.6 && cd /tmp && \
    wget https://github.com/HDFGroup/hdf5/releases/download/hdf5_${HDF5_VERSION}/hdf5-${HDF5_VERSION}.tar.gz && \
    tar -xvf hdf5-${HDF5_VERSION}.tar.gz && \
    cd hdf5-${HDF5_VERSION} && \
    mkdir build && cd build && \
    cmake -DCMAKE_INSTALL_PREFIX=/opt \
        -DHDF5_BUILD_FORTRAN=ON \
        -DHDF5_ENABLE_PARALLEL=ON \
        -DHDF5_USE_ZLIB_STATIC=ON \
        -DZLIB_USE_EXTERNAL=ON \
        .. && \
    make -j$(nproc) && cmake --install . && \
    cd /tmp && rm -rf hdf5*

# Setup FFTW
RUN FFTW_VERSION=3.3.10 && cd /tmp && \
    wget https://fftw.org/fftw-${FFTW_VERSION}.tar.gz && \
    tar -xvf fftw-${FFTW_VERSION}.tar.gz && \
    cd fftw-${FFTW_VERSION} && \
    ./configure --prefix=/opt && \
    make -j$(nproc) && make install && \
    cd /tmp && rm -rf fftw*

# Setup ParaView
# Ubuntu24 apt-repository provides v5.11.2 which suffers from XML-parsing bug (https://discourse.paraview.org/t/i-cannot-read-a-vtp-file-i-could-open-yesterday-can-someone-try-to-open-it/13938)
COPY FileParser_5_9_0.patch .
RUN PARAVIEW_VERSION=5.13.3 && cd /tmp && \
    wget https://www.paraview.org/files/v${PARAVIEW_VERSION%??}/ParaView-v${PARAVIEW_VERSION}.tar.gz && \
    tar -xvf ParaView-v${PARAVIEW_VERSION}.tar.gz && \
    cd ParaView-v${PARAVIEW_VERSION} && \
    mv ../../FileParser_5_9_0.patch . && patch -p0 < FileParser_5_9_0.patch && \
    mkdir build && cd build/ && \
    cmake \
      -DCMAKE_BUILD_TYPE=Release \
      -DPARAVIEW_USE_MPI=ON \
      -DPARAVIEW_INSTALL_DEVELOPMENT_FILES=ON \
      -DPARAVIEW_USE_PYTHON=ON \
      -DVTK_MODULE_USE_EXTERNAL_VTK_hdf5=ON \
      -DHDF5_IS_PARALLEL=ON \
      -DHDF5_DIR=/opt/cmake \
      -DCMAKE_INSTALL_PREFIX=/opt \
      ../ && \
    make -j $(nproc) && make install && \
    cd /tmp && rm -rf ParaView*


# ---------------------------------------
# Install FLEXI and HOPR / PyHOPE as user
# ---------------------------------------

# Create new (non-root) user and switch to it
RUN groupadd --gid ${NB_GID} ${NB_USER} && \
    useradd  --gid ${NB_GID} --uid ${NB_UID} -m -s /bin/bash ${NB_USER}
USER ${NB_USER}

# FLEXI environment installed to /opt, hence include directory in PATH variable
ENV PATH="/opt/bin:$PATH"

# Set working directory when launching container and set up vim
WORKDIR /home/${NB_USER}
COPY vimrc /home/${NB_USER}/.vimrc

# Create venv and enable it to allow for pip installations
RUN python -m venv venv
ENV PATH="/home/${NB_USER}/venv/bin:$PATH"

# Setup FLEXI
RUN cd /home/${NB_USER} && \
    git clone https://github.com/flexi-framework/flexi.git && \
    cd flexi  && \
    # build all presets without CPU-specific optimizations to ensure portability
    for PRESET in $(cmake --list-presets | sed -n 's/"\(.*\)"/\1/p'); do \
      cmake -DFLEXI_INSTRUCTION='-march=x86-64 -mtune=generic' --preset $PRESET && cmake --build --preset $PRESET -j ${nproc}; \
    done

# Setup HOPR
RUN cd /home/${NB_USER} && \
    git clone https://github.com/hopr-framework/hopr.git && \
    cd hopr && mkdir build && cd build && \
    cmake -DLIBS_BUILD_HDF5=OFF -DHOPR_INSTRUCTION='-march=x86-64 -mtune=generic' ../ && \
    make -j $(nproc)
ENV PATH="/home/${NB_USER}/hopr/build/bin:$PATH"

# Setup PyHOPE
RUN cd /home/${NB_USER} && \
    pip install --no-cache-dir \
    https://gitlab.iag.uni-stuttgart.de/libs/python-gmsh/-/raw/master/gmsh-4.14.0.post1-py3-none-linux_x86_64.whl \
    pyhope
