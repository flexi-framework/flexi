# -*- coding: utf-8 -*-
#
# SPDX-License-Identifier: GPL-3.0-or-later
#
# This file is part of FLEXI, a high-order accurate framework for numerically solving PDEs with discontinuous Galerkin methods.
# For more information see https://www.flexi-project.org and https://numericsresearchgroup.org
#
# Copyright (c) 2010-2022 Prof. Claus-Dieter Munz
# Copyright (c) 2022-2025 Prof. Andrea Beck
#
# FLEXI is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
#
# FLEXI is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty
# of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License v3.0 for more details.
#
# You should have received a copy of the GNU General Public License along with FLEXI. If not, see <http://www.gnu.org/licenses/>.

# ==================================================================================================================================
# Continuous Integration/Continuous Deployment
# ==================================================================================================================================

# ----------------------------------------------------------------------------------------------------------------------------------------------------
# Settings
# ----------------------------------------------------------------------------------------------------------------------------------------------------
# Check module environment
before_script:
  - ulimit -s unlimited
  # - module list || true
  - python3 --version
  # Setup Python virtual environment
  - source venv/bin/activate || true
  # Setup CMake generator
  - export CMAKE_GENERATOR="Ninja"
  - export CMAKE_LINKER_TYPE="MOLD"

# ----------------------------------------------------------------------------------------------------------------------------------------------------
# Stages
# ----------------------------------------------------------------------------------------------------------------------------------------------------
stages:
  - lint
  - setup
  - reggie_checkin
  - reggie_nightly
  - reggie_weekly
  - python
  - documentation
  - deploy

# ----------------------------------------------------------------------------------------------------------------------------------------------------
# Templates ("hidden jobs")
# ----------------------------------------------------------------------------------------------------------------------------------------------------
# Default parameters for the build and testing stage
.default_build_param: &default_build_param
  tags: [dockertag]
  # Docker image to use for the CI/CD pipeline
  # image: ${CI_REGISTRY_IMAGE}/nrg-fedora:42-x86_64
  image:
    name: registry.iag.uni-stuttgart.de/flexi/flexi/nrg-fedora_42-x86_64
  artifacts:
    name: "${CI_PIPELINE_ID}-${CI_COMMIT_REF_NAME}-${CI_JOB_NAME}"
    expire_in: 1 day
    when: on_failure
  variables:
    PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  cache:
    paths:
      - .cache/pip

.default_python_param: &default_python_param
  <<: *default_build_param

# Deployment needs to be done on the actual server
.default_deploy_param: &default_deploy_param
  tags: [flexitag]

# ----------------------------------------------------------------------------------------------------------------------------------------------------
# Default parameters for the reggie stage
.default_param: &default_param
  <<: *default_build_param
  allow_failure: false

.default_param_matrix: &default_param_matrix
  <<: *default_build_param
  allow_failure: false
  image:
    name: $CI_JOB_IMAGE

.default_python: &default_python
  <<: *default_python_param
  allow_failure: false

.venv_cache: &venv_cache
  key: "venv"
  paths:
    - venv
  policy: pull

# .reggie_cache: &reggie_cache
#   key: "reggie"
#   paths:
#     - reggie
#   policy: pull

# ----------------------------------------------------------------------------------------------------------------------------------------------------
# Defaults for the standard tests (utilizing "extends" to merge the other "artifacts" options with the specific path)
.defaults: &defaults
  extends: .default_param
  needs: [build]
  artifacts:
    paths: [build]
  cache:
    - *venv_cache
    # - *reggie_cache
    - key: "${CI_COMMIT_REF_SLUG}"
      paths: [build]
      policy: pull
  variables:
    FF_ENABLE_JOB_CLEANUP: 1

.defaults_python: &defaults_python
  extends: .default_python
  variables:
    FF_ENABLE_JOB_CLEANUP: 1

.defaults_nightly: &defaults_nightly
  <<: *defaults
  rules:
    - if: '$DO_NIGHTLY'

.defaults_weekly: &defaults_weekly
  <<: *defaults
  rules:
    - if: '$DO_WEEKLY'

# ----------------------------------------------------------------------------------------------------------------------------------------------------
# Stage "lint": Run the linters
# policy: allow failure without stopping pipeline only on feature branches
# ----------------------------------------------------------------------------------------------------------------------------------------------------
fortitude:
  <<: *defaults_python
  stage: lint
  script:
    - fortitude --version
    - fortitude check --output-format=grouped src
  rules:
    # Skip running this job for merge requests targeting the default branch
  - if: '$CI_MERGE_REQUEST_ID && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == $CI_DEFAULT_BRANCH'
    when: never
    # For feature branches, allow failure without stopping the pipeline
  - if: '$CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH'
    allow_failure: true
    # For master branch, do not allow failure without stopping the pipeline
  - when: always
    allow_failure: false

ruff:
  <<: *defaults_python
  stage: lint
  script:
    - ruff --version
    - ruff check --extend-ignore=E201,E202,E203,E221,E222,E225,E231,E271,E272 --line-length=132 --preview docs tools

# ----------------------------------------------------------------------------------------------------------------------------------------------------
# Stage "setup": Setup the reggie environment
# ----------------------------------------------------------------------------------------------------------------------------------------------------

venv_create:
  extends: .default_build_param
  cache:
    - key: "venv"
      paths:
        - venv
      policy: pull-push
  stage: setup
  script:
    - deactivate || true
    - rm -rf venv
    - uv venv venv
    - source venv/bin/activate
    - uv pip install --upgrade pip setuptools wheel
    - uv pip install --upgrade pytest pytest-cov

reggie_download:
  extends: .default_build_param
  needs: [venv_create]
  artifacts:
    paths: [venv]
  cache:
    - key: "venv"
      paths:
        - venv
      policy: pull-push
    # - key: "reggie"
    #   paths:
    #     - reggie
    #   policy: push
  stage: setup
  script:
    # Install Reggie
    - uv pip install git+https://github.com/piclas-framework/reggie2.0.git
    # Check Reggie
    - reggie --help

# ----------------------------------------------------------------------------------------------------------------------------------------------------
# Stage "reggie_checkin": Run most simple reggie with previous builds on check-in
# ----------------------------------------------------------------------------------------------------------------------------------------------------
build:
  extends: .default_param_matrix
  needs: [reggie_download]
  artifacts:
    paths: [build]
  cache:
    key: "${CI_COMMIT_REF_SLUG}"
    paths: [build]
    policy: push
  stage: reggie_checkin
  parallel:
    matrix:
      # GNU Compiler Collection (GCC)
      - CI_JOB_IMAGE: registry.iag.uni-stuttgart.de/flexi/flexi/nrg-fedora_42-x86_64
        CI_BUILD_DIR: build
        CI_LINKER:    MOLD
      # Low Level Virtual Machine (LLVM)
      # - CI_JOB_IMAGE: registry.iag.uni-stuttgart.de/flexi/flexi/nrg-fedora_42-llvm-x86_64
      #   CI_BUILD_DIR: build_llvm
      # Intel oneAPI Compiler
      - CI_JOB_IMAGE: registry.iag.uni-stuttgart.de/flexi/flexi/nrg-fedora_42-intel-x86_64
        CI_BUILD_DIR: build_intel
        CI_LINKER:    DEFAULT
  script:
    - echo ${CI_BUILD_DIR}
    - export CMAKE_LINKER_TYPE=${CI_LINKER}
    - cmake -B ${CI_BUILD_DIR} -DLIBS_BUILD_HDF5=OFF
    - cmake --build ${CI_BUILD_DIR} -j6

checkin:
  <<: *defaults
  stage: reggie_checkin
  needs: [build]
  script:
    - cd build
    - reggie ../regressioncheck/checks/run_basic/freestream_3D -j 6 -e ./bin/flexi

# ----------------------------------------------------------------------------------------------------------------------------------------------------
# Stage "reggie_nightly": Build and run
#                         - build all specified compile options in "run_basic" with LIBS_BUILD_HDF5=ON
#                         - h-p-convtests
#                         - parabolic testcases
#                         - riemann solver tests
# ----------------------------------------------------------------------------------------------------------------------------------------------------
build_all:
  <<: *defaults_nightly
  stage: reggie_nightly
  script:
    - cd build
    - reggie ../regressioncheck/checks/run_basic -j 6

timediscs:
  <<: *defaults_nightly
  stage: reggie_nightly
  script:
    - cd build
    - reggie ../regressioncheck/checks/timedisc -j 6

convtest:
  <<: *defaults_nightly
  stage: reggie_nightly
  script:
    - cd build
    - reggie ../regressioncheck/checks/convtest -j 6

parabolic:
  <<: *defaults_nightly
  stage: reggie_nightly
  script:
    - cd build
    - reggie ../regressioncheck/checks/parabolic -j 6

riemann:
  <<: *defaults_nightly
  stage: reggie_nightly
  script:
    - cd build
    - reggie ../regressioncheck/checks/riemann -j 6

# ----------------------------------------------------------------------------------------------------------------------------------------------------
# Stage "reggie_weekly": Build and run more complex tests, basically complete simulatons
#                         - Taylor-Green vortex
#                         - NACA profile
#                         - Advanced FV simulations
#                         - RANS channel
# ----------------------------------------------------------------------------------------------------------------------------------------------------
tgv:
  <<: *defaults_weekly
  stage: reggie_weekly
  script:
    - cd build
    - reggie ../regressioncheck/checks/tgv -j 6

naca:
  <<: *defaults_weekly
  stage: reggie_weekly
  script:
    - cd build
    - reggie ../regressioncheck/checks/naca -j 6

fv_switch:
  <<: *defaults_weekly
  stage: reggie_weekly
  script:
    - cd build
    - reggie ../regressioncheck/checks/fv_switch -j 6

fv_blend:
  <<: *defaults_weekly
  stage: reggie_weekly
  script:
    - cd build
    - reggie ../regressioncheck/checks/fv_blend -j 6

channelRANS:
  <<: *defaults_weekly
  stage: reggie_weekly
  script:
    - cd build
    - reggie ../regressioncheck/checks/channelRANS -j 6

imperator:
  <<: *defaults_weekly
  stage: reggie_weekly
  script:
    - cd build
    - reggie ../regressioncheck/checks/preconditioner -j 6

# ----------------------------------------------------------------------------------------------------------------------------------------------------
# Stage "documentation": Creates doxygen documentation & compiles the documentation creating the *.pdf
# ----------------------------------------------------------------------------------------------------------------------------------------------------
documentation:
  extends: .default_build_param
  stage: documentation
  rules:
    - if: '$DO_DEPLOY'
    - if: '$DO_WEEKLY'
  script:
    - cd docs/doxygen
    - ./builddoxy.sh
  artifacts:
    paths:
      - src
      - docs/doxygen
  cache:
    key: "${CI_COMMIT_REF_SLUG}-DOC"
    paths: [docs/doxygen]
    policy: push

userguide:
  extends: .default_build_param
  stage: documentation
  image: sphinxdoc/sphinx-latexpdf:latest
  rules:
    - if: '$DO_DEPLOY'
    - if: '$DO_WEEKLY'
  script:
    - cd docs/documentation
    - python3 -m pip install --exists-action=w --no-cache-dir -r requirements.txt
    - python3 -m sphinx -T -E -b html -d _build/doctrees -D language=en . _build/html
    - ls -l _build/html
    - python3 -m sphinx -b latex -D language=en -d _build/doctrees . _build/latex
    - ls -l _build/latex
    - cd _build/latex
    - latexmk -r latexmkrc -pdf -f -dvi- -ps- -jobname=flexi -interaction=nonstopmode || true
    - ls -l
    - ls -l flexi.pdf
  artifacts:
    paths:
      - docs/documentation
  cache:
    key: "${CI_COMMIT_REF_SLUG}-USERGUIDE"
    paths: [docs/documentation]
    policy: push

# ----------------------------------------------------------------------------------------------------------------------------------------------------
# Stage "deploy": Copies the doxygen documentation and userguide *.pdf to the homepage server & copies the repository to github
# ----------------------------------------------------------------------------------------------------------------------------------------------------
homepage:
  extends: .default_deploy_param
  stage: deploy
  rules:
    - if: '$DO_DEPLOY && $CI_SERVER_URL =~ /.*\.iag\.uni-stuttgart\.de$/'
  cache:
    - key: "${CI_COMMIT_REF_SLUG}-USERGUIDE"
      paths: [docs/documentation]
      policy: pull
  variables:
    FF_ENABLE_JOB_CLEANUP: 1
  script:
    - rsync --recursive --delete docs/documentation/_build/latex/flexi.pdf webserver:nrg.git/nrg_website/NRG/userguide/pdf/userguide.pdf
    - rsync --recursive --delete docs/documentation/_build/html/*          webserver:nrg.git/nrg_website/NRG/userguide/html/.

github:
  extends: .default_deploy_param
  stage: deploy
  rules:
    - if: '$DO_DEPLOY && $CI_SERVER_URL =~ /.*\.iag\.uni-stuttgart\.de$/'
  variables:
    FF_ENABLE_JOB_CLEANUP: 1
  script:
    - git clone --single-branch git@gitlab.iag.uni-stuttgart.de:flexi/flexi.git flexi_github
    - cd flexi_github
    - git push --mirror git@github.com:flexi-framework/flexi.git
    # - git push --mirror git@github.com:flexi-framework/flexi-extensions.git
